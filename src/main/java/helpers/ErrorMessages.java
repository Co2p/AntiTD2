package helpers;

/**
 * Created by Alexander Nystr√∂m(dv15anm) on 09/12/2016.
 */
public class ErrorMessages {
    private String saxException;
    private String parseConfigException;
    private String saxParsWarning;
    private String saxParsError;
    private String saxParsFatalError;
    private String xpathException;
    private String numberFormat;
    private String fileError;
    private String parsError;
    private String instantiationException;
    private String illegalAccessException;
    private String interFaceError;
    private String constructorError;
    private String classNotFoundException;
    private String noClassDefFoundError;
    private String implementationError;
    private int size;

    /**
     * Class to contain all error messages generated by the LevelParser and the
     * ZoneLoader
     */
    public ErrorMessages() {

    }

    /**
     *
     * @return message generated by a SaxException.
     */
    public String getSaxException() {
        return saxException;
    }

    /**
     *
     * @param saxException message generated by a SaxException
     */
    public void setSaxException(String saxException) {
        size++;
        this.saxException = saxException;
    }

    /**
     *
     * @return message generated by a ParseConfigurationException
     */
    public String getParseConfigException() {
        return parseConfigException;
    }

    /**
     *
     * @param parseConfigException message generated by a ParseConfigurationException
     */
    public void setParseConfigException(String parseConfigException) {
        size++;
        this.parseConfigException = parseConfigException;
    }

    /**
     *
     * @return message generated by a SaxParseWarning
     */
    public String getSaxParsWarning() {
        return saxParsWarning;
    }

    /**
     *
     * @param saxParsWarning message generated by a SaxParseWarning
     */
    public void setSaxParsWarning(String saxParsWarning) {
        size++;
        this.saxParsWarning = saxParsWarning;
    }

    /**
     *
     * @return message generated by a SaxParseError
     */
    public String getSaxParsError() {
        return saxParsError;
    }

    /**
     *
     * @param saxParsError message generated by a SaxParseError
     */
    public void setSaxParsError(String saxParsError) {
        size++;
        this.saxParsError = saxParsError;
    }

    /**
     *
     * @return message generate by a SaxParseFatalError
     */
    public String getSaxParsFatalError() {
        return saxParsFatalError;
    }

    /**
     *
     * @param saxParsFatalError message generated by a SaxParseFatalError
     */
    public void setSaxParsFatalError(String saxParsFatalError) {
        size++;
        this.saxParsFatalError = saxParsFatalError;
    }

    /**
     *
     * @return message generated by a XpathException
     */
    public String getXpathException() {
        return xpathException;
    }

    /**
     *
     * @param xpathException message generated by a XpathException
     */
    public void setXpathException(String xpathException) {
        size++;
        this.xpathException = xpathException;
    }

    /**
     *
     * @return message generated by a NumberFormatException
     */
    public String getNumberFormat() {
        return numberFormat;
    }

    /**
     *
     * @param numberFormat message generated by a NumberFormatException
     */
    public void setNumberFormat(String numberFormat) {
        size++;
        this.numberFormat = numberFormat;
    }

    /**
     *
     * @return message generated if the file could not be found by the parser
     */
    public String getFileError() {
        return fileError;
    }

    /**
     *
     * @param fileError message generated if the file could not be found by the
     *                  parser
     */
    public void setFileError(String fileError) {
        size++;
        this.fileError = fileError;
    }

    /**
     *
     * @return message generated when parsing the xml file
     */
    public String getParsError() {
        return parsError;
    }


    /**
     *
     * @param parsError message generated when parsing the xml file
     */
    public void setParsError(String parsError) {
        size++;
        this.parsError = parsError;
    }

    /**
     *
     * @return number of messages generated
     */
    public int getSize() {
        return size;
    }

    /**
     *
     * @return message generated by a InstantiationException
     */
    public String getInstantiationException() {
        return instantiationException;
    }

    /**
     *
     * @param instantiationException message generated by a InstantiationException
     */
    public void setInstantiationException(String instantiationException) {
        size++;
        this.instantiationException = instantiationException;
    }

    /**
     *
     * @return message generated by a IllegalAccessException
     */
    public String getIllegalAccessException() {
        return illegalAccessException;
    }

    /**
     *
     * @param illegalAccessException message generated by a IllegalAccessException
     */
    public void setIllegalAccessException(String illegalAccessException) {
        size++;
        this.illegalAccessException = illegalAccessException;
    }

    /**
     *
     * @return message generated if the class loaded by the zoneLoader is an
     * Interface
     */
    public String getInterFaceError() {
        return interFaceError;
    }

    /**
     *
     * @param interFaceError message generated if the class loaded by
     *                       the zoneLoader is an Interface
     */
    public void setInterFaceError(String interFaceError) {
        size++;
        this.interFaceError = interFaceError;
    }

    /**
     *
     * @return message generated if the class loaded by the ZoneLoader has an
     * incompatible constructor
     */
    public String getConstructorError() {
        return constructorError;
    }

    /**
     *
     * @param constructorError message generated if the class loaded by the
     *                         ZoneLoader has an incompatible constructor
     */
    public void setConstructorError(String constructorError) {
        size++;
        this.constructorError = constructorError;
    }

    /**
     *
     * @return message generated by a ClassNotFoundException
     */
    public String getClassNotFoundException() {
        return classNotFoundException;
    }

    /**
     *
     * @param classNotFoundException message generated by a
     *                               ClassNotFoundException
     */
    public void setClassNotFoundException(String classNotFoundException) {
        size++;
        this.classNotFoundException = classNotFoundException;
    }

    /**
     *
     * @return message generated by a NoClassDefFoundError
     */
    public String getNoClassDefFoundError() {
        return noClassDefFoundError;
    }

    /**
     *
     * @param noClassDefFoundError message generated by a NoClassDefFoundError
     */
    public void setNoClassDefFoundError(String noClassDefFoundError) {
        size++;
        this.noClassDefFoundError = noClassDefFoundError;
    }

    /**
     *
     * @return message generated by a ImplementationError
     */
    public String getImplementationError() {
        return implementationError;
    }

    /**
     *
     * @param implementationError message generated by a ImplementationError
     */
    public void setImplementationError(String implementationError) {
        size++;
        this.implementationError = implementationError;
    }

    /**
     *
     * @return Formats a string containing all messages.
     */
    @Override
    public String toString() {
        String error = "";
        if(saxException != null) {
         error = error.concat("'"+saxException+'\'');
        }
        if(parseConfigException != null) {
            error = error.concat("\n '" + parseConfigException + '\'');
        }
        if (saxParsWarning != null) {
            error = error.concat("\n '" + saxParsWarning + '\'');
        }
        if (saxParsError != null) {
            error = error.concat("\n '" + saxParsError + '\'');
        }
        if (saxParsFatalError != null) {
            error = error.concat("\n '" + saxParsFatalError + '\'');
        }
        if (xpathException != null) {
            error = error.concat("\n '" + xpathException + '\'');
        }
        if (numberFormat != null) {
            error = error.concat("\n '" + numberFormat + '\'');
        }
        if (fileError != null) {
            error = error.concat("\n '" + fileError + '\'');
        }
        if (parsError != null) {
            error = error.concat("\n '" + parsError + '\'');
        }
        if (instantiationException != null) {
            error = error.concat("\n '" + instantiationException + '\'');
        }
        if (illegalAccessException != null) {
            error = error.concat("\n '" + illegalAccessException + '\'');
        }
        if (interFaceError != null) {
            error = error.concat("\n '" + interFaceError + "\'");
        }
        if (constructorError != null) {
            error = error.concat("\n '" + constructorError + "\'");
        }
        if (classNotFoundException != null) {
            error = error.concat("\n '" + classNotFoundException + '\'');
        }
        if (noClassDefFoundError != null) {
            error = error.concat("\n '" + classNotFoundException + '\'');
        }
        if (implementationError != null) {
            error = error.concat("\n '" + implementationError + '\'');
        }
        return error;
    }
}
